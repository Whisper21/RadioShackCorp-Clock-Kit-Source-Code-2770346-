

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Feb 04 10:58:09 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  000A                     	;# 
    33  000B                     	;# 
    34  000C                     	;# 
    35  000D                     	;# 
    36  000E                     	;# 
    37  000E                     	;# 
    38  000F                     	;# 
    39  0010                     	;# 
    40  0011                     	;# 
    41  0012                     	;# 
    42  0013                     	;# 
    43  0014                     	;# 
    44  0015                     	;# 
    45  0015                     	;# 
    46  0016                     	;# 
    47  0017                     	;# 
    48  0018                     	;# 
    49  0019                     	;# 
    50  001A                     	;# 
    51  001C                     	;# 
    52  001D                     	;# 
    53  001E                     	;# 
    54  001F                     	;# 
    55  0081                     	;# 
    56  0085                     	;# 
    57  0086                     	;# 
    58  0087                     	;# 
    59  008C                     	;# 
    60  008D                     	;# 
    61  008E                     	;# 
    62  008F                     	;# 
    63  0090                     	;# 
    64  0092                     	;# 
    65  0093                     	;# 
    66  0093                     	;# 
    67  0093                     	;# 
    68  0094                     	;# 
    69  0095                     	;# 
    70  0095                     	;# 
    71  0096                     	;# 
    72  0096                     	;# 
    73  0097                     	;# 
    74  0098                     	;# 
    75  0099                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010C                     	;# 
    82  010D                     	;# 
    83  010E                     	;# 
    84  010F                     	;# 
    85  0115                     	;# 
    86  0116                     	;# 
    87  0118                     	;# 
    88  0119                     	;# 
    89  011A                     	;# 
    90  011B                     	;# 
    91  011E                     	;# 
    92  011F                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  019D                     	;# 
    96  019E                     	;# 
    97                           
    98                           	psect	idataCOMMON
    99  031C                     __pidataCOMMON:	
   100                           
   101                           ;initializer for _hours
   102  031C  3401               	retlw	1
   103                           
   104                           	psect	idataBANK0
   105  0319                     __pidataBANK0:	
   106                           
   107                           ;initializer for _key_delay_time
   108  0319  34C8               	retlw	200
   109                           
   110                           ;initializer for _show_dots
   111  031A  3401               	retlw	1
   112                           
   113                           ;initializer for flash_digital@show_dots
   114  031B  3401               	retlw	1
   115                           
   116                           	psect	strings
   117  0301                     __pstrings:	
   118  0301                     stringtab:	
   119  0301                     __stringtab:	
   120  0301                     stringcode:	
   121                           ;	String table - string pointers are 1 byte each
   122                           
   123  0301                     stringdir:	
   124  0301  3003               	movlw	high stringdir
   125  0302  008A               	movwf	10
   126  0303  0804               	movf	4,w
   127  0304  0A84               	incf	4,f
   128  0305  0782               	addwf	2,f
   129  0306                     __stringbase:	
   130  0306  3400               	retlw	0
   131  0307                     __end_of__stringtab:	
   132  0307                     _seg_tab:	
   133  0307  34C0               	retlw	192
   134  0308  34F9               	retlw	249
   135  0309  34A4               	retlw	164
   136  030A  34B0               	retlw	176
   137  030B  3499               	retlw	153
   138  030C  3492               	retlw	146
   139  030D  3482               	retlw	130
   140  030E  34F8               	retlw	248
   141  030F  3480               	retlw	128
   142  0310  3490               	retlw	144
   143  0311                     __end_of_seg_tab:	
   144  000B                     _INTCONbits	set	11
   145  0005                     _PORTA	set	5
   146  0006                     _PORTB	set	6
   147  0007                     _PORTC	set	7
   148  0001                     _TMR0	set	1
   149  0081                     _OPTION_REG	set	129
   150  008F                     _OSCCON	set	143
   151  0085                     _TRISA	set	133
   152  0086                     _TRISB	set	134
   153  0087                     _TRISC	set	135
   154  011E                     _ANSEL	set	286
   155  0119                     _CM1CON0	set	281
   156  011A                     _CM2CON0	set	282
   157  0115                     _WPUB	set	277
   158                           
   159                           ; #config settings
   160  0000                     
   161                           	psect	cinit
   162  0013                     start_initialization:	
   163  0013                     __initialization:	
   164                           
   165                           ; Clear objects allocated to COMMON
   166  0013  01FC               	clrf	__pbssCOMMON& (0+127)
   167                           
   168                           ; Clear objects allocated to BANK0
   169  0014  1383               	bcf	3,7	;select IRP bank0
   170  0015  3020               	movlw	low __pbssBANK0
   171  0016  0084               	movwf	4
   172  0017  3037               	movlw	low (__pbssBANK0+23)
   173  0018  118A  2311  118A   	fcall	clear_ram0
   174                           
   175                           ; Initialize objects allocated to BANK0
   176  001B  118A  2319  118A   	fcall	__pidataBANK0	;fetch initializer
   177  001E  00BD               	movwf	__pdataBANK0& (0+127)
   178  001F  118A  231A  118A   	fcall	__pidataBANK0+1	;fetch initializer
   179  0022  00BE               	movwf	(__pdataBANK0+1)& (0+127)
   180  0023  118A  231B  118A   	fcall	__pidataBANK0+2	;fetch initializer
   181  0026  00BF               	movwf	(__pdataBANK0+2)& (0+127)
   182                           
   183                           ; Initialize objects allocated to COMMON
   184  0027  118A  231C         	fcall	__pidataCOMMON	;fetch initializer
   185  0029  00FD               	movwf	__pdataCOMMON& (0+127)
   186  002A                     end_of_initialization:	
   187                           ;End of C runtime variable initialization code
   188                           
   189  002A                     __end_of__initialization:	
   190  002A  0183               	clrf	3
   191  002B  118A  28EE         	ljmp	_main	;jump to C main() function
   192                           
   193                           	psect	bssCOMMON
   194  007C                     __pbssCOMMON:	
   195  007C                     _key_value:	
   196  007C                     	ds	1
   197                           
   198                           	psect	dataCOMMON
   199  007D                     __pdataCOMMON:	
   200  007D                     _hours:	
   201  007D                     	ds	1
   202                           
   203                           	psect	bssBANK0
   204  0020                     __pbssBANK0:	
   205  0020                     _digital:	
   206  0020                     	ds	4
   207  0024                     ISR@timming_cnt:	
   208  0024                     	ds	2
   209  0026                     _no_key_time:	
   210  0026                     	ds	2
   211  0028                     _power_save_timeout:	
   212  0028                     	ds	2
   213  002A                     flash_digital@counter:	
   214  002A                     	ds	2
   215  002C                     ISR@cnt1:	
   216  002C                     	ds	1
   217  002D                     ISR@cnt2:	
   218  002D                     	ds	1
   219  002E                     ISR@x:	
   220  002E                     	ds	1
   221  002F                     _flash_dots:	
   222  002F                     	ds	1
   223  0030                     _isPowerSaveMode:	
   224  0030                     	ds	1
   225  0031                     _minutes:	
   226  0031                     	ds	1
   227  0032                     _seconds:	
   228  0032                     	ds	1
   229  0033                     _sysstate:	
   230  0033                     	ds	1
   231  0034                     detect_key@counter:	
   232  0034                     	ds	1
   233  0035                     detect_key@keystate:	
   234  0035                     	ds	1
   235  0036                     flash_digital@curseg:	
   236  0036                     	ds	1
   237                           
   238                           	psect	dataBANK0
   239  003D                     __pdataBANK0:	
   240  003D                     _key_delay_time:	
   241  003D                     	ds	1
   242  003E                     _show_dots:	
   243  003E                     	ds	1
   244  003F                     flash_digital@show_dots:	
   245  003F                     	ds	1
   246                           
   247                           	psect	clrtext
   248  0311                     clear_ram0:	
   249                           ;	Called with FSR containing the base address, and
   250                           ;	W with the last address+1
   251                           
   252  0311  0064               	clrwdt	;clear the watchdog before getting into this loop
   253  0312                     clrloop0:	
   254  0312  0180               	clrf	0	;clear RAM location pointed to by FSR
   255  0313  0A84               	incf	4,f	;increment pointer
   256  0314  0604               	xorwf	4,w	;XOR with final address
   257  0315  1903               	btfsc	3,2	;have we reached the end yet?
   258  0316  3400               	retlw	0	;all done for this memory range, return
   259  0317  0604               	xorwf	4,w	;XOR again to restore value
   260  0318  2B12               	goto	clrloop0	;do the next byte
   261                           
   262                           	psect	cstackCOMMON
   263  0070                     __pcstackCOMMON:	
   264  0070                     ?_main:	
   265  0070                     ?_flash_digital:	
   266                           ; 0 bytes @ 0x0
   267                           
   268  0070                     ?_clock_increase:	
   269                           ; 0 bytes @ 0x0
   270                           
   271  0070                     ??_clock_increase:	
   272                           ; 0 bytes @ 0x0
   273                           
   274  0070                     ?_detect_key:	
   275                           ; 0 bytes @ 0x0
   276                           
   277  0070                     ??_detect_key:	
   278                           ; 0 bytes @ 0x0
   279                           
   280  0070                     ?_ISR:	
   281                           ; 0 bytes @ 0x0
   282                           
   283  0070                     ?___awdiv:	
   284                           ; 0 bytes @ 0x0
   285                           
   286  0070                     ?___awmod:	
   287                           ; 2 bytes @ 0x0
   288                           
   289  0070                     ___awdiv@divisor:	
   290                           ; 2 bytes @ 0x0
   291                           
   292  0070                     ___awmod@divisor:	
   293                           ; 2 bytes @ 0x0
   294                           
   295                           
   296                           ; 2 bytes @ 0x0
   297  0070                     	ds	1
   298  0071                     detect_key@key:	
   299                           
   300                           ; 1 bytes @ 0x1
   301  0071                     	ds	1
   302  0072                     ___awdiv@dividend:	
   303  0072                     ___awmod@dividend:	
   304                           ; 2 bytes @ 0x2
   305                           
   306                           
   307                           ; 2 bytes @ 0x2
   308  0072                     	ds	2
   309  0074                     ??___awdiv:	
   310  0074                     ??___awmod:	
   311                           ; 0 bytes @ 0x4
   312                           
   313                           
   314                           ; 0 bytes @ 0x4
   315  0074                     	ds	1
   316  0075                     ___awdiv@counter:	
   317  0075                     ___awmod@counter:	
   318                           ; 1 bytes @ 0x5
   319                           
   320                           
   321                           ; 1 bytes @ 0x5
   322  0075                     	ds	1
   323  0076                     ___awdiv@sign:	
   324  0076                     ___awmod@sign:	
   325                           ; 1 bytes @ 0x6
   326                           
   327                           
   328                           ; 1 bytes @ 0x6
   329  0076                     	ds	1
   330  0077                     ___awdiv@quotient:	
   331                           
   332                           ; 2 bytes @ 0x7
   333  0077                     	ds	2
   334  0079                     ??_flash_digital:	
   335                           
   336                           ; 0 bytes @ 0x9
   337  0079                     	ds	3
   338                           
   339                           	psect	cstackBANK0
   340  0037                     __pcstackBANK0:	
   341  0037                     ??_ISR:	
   342                           
   343                           ; 0 bytes @ 0x0
   344  0037                     	ds	5
   345  003C                     ??_main:	
   346                           
   347                           ; 0 bytes @ 0x5
   348  003C                     	ds	1
   349                           
   350                           	psect	maintext
   351  00EE                     __pmaintext:	
   352 ;;
   353 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   354 ;;
   355 ;; *************** function _main *****************
   356 ;; Defined at:
   357 ;;		line 36 in file "main.c"
   358 ;; Parameters:    Size  Location     Type
   359 ;;		None
   360 ;; Auto vars:     Size  Location     Type
   361 ;;		None
   362 ;; Return value:  Size  Location     Type
   363 ;;		None               void
   364 ;; Registers used:
   365 ;;		wreg, status,2, status,0
   366 ;; Tracked objects:
   367 ;;		On entry : 17F/0
   368 ;;		On exit  : 0/0
   369 ;;		Unchanged: 0/0
   370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   371 ;;      Params:         0       0       0       0
   372 ;;      Locals:         0       0       0       0
   373 ;;      Temps:          0       1       0       0
   374 ;;      Totals:         0       1       0       0
   375 ;;Total ram usage:        1 bytes
   376 ;; Hardware stack levels required when called:    3
   377 ;; This function calls:
   378 ;;		Nothing
   379 ;; This function is called by:
   380 ;;		Startup code after reset
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           
   385                           ;psect for function _main
   386  00EE                     _main:	
   387                           
   388                           ;main.c: 41: OSCCON = 0b01110000;
   389                           
   390                           ;incstack = 0
   391                           ; Regs used in _main: [wreg+status,2+status,0]
   392  00EE  3070               	movlw	112
   393  00EF  1683               	bsf	3,5	;RP0=1, select bank1
   394  00F0  1303               	bcf	3,6	;RP1=0, select bank1
   395  00F1  008F               	movwf	15	;volatile
   396                           
   397                           ;main.c: 46: OPTION_REG=0b00000011;
   398                           
   399                           ;main.c: 42: while((OSCCON & (1<<2) == 0));
   400  00F2  3003               	movlw	3
   401  00F3  0081               	movwf	1	;volatile
   402                           
   403                           ;main.c: 53: TMR0 = 256 - 125;
   404  00F4  3083               	movlw	131
   405  00F5  1283               	bcf	3,5	;RP0=0, select bank0
   406  00F6  1303               	bcf	3,6	;RP1=0, select bank0
   407  00F7  0081               	movwf	1	;volatile
   408                           
   409                           ;main.c: 54: INTCONbits.GIE=1;
   410  00F8  178B               	bsf	11,7	;volatile
   411                           
   412                           ;main.c: 55: INTCONbits.T0IE=1;
   413  00F9  168B               	bsf	11,5	;volatile
   414                           
   415                           ;main.c: 56: INTCONbits.T0IF=0;
   416  00FA  110B               	bcf	11,2	;volatile
   417                           
   418                           ;main.c: 59: ANSEL = 0;
   419  00FB  1283               	bcf	3,5	;RP0=0, select bank2
   420  00FC  1703               	bsf	3,6	;RP1=1, select bank2
   421  00FD  019E               	clrf	30	;volatile
   422                           
   423                           ;main.c: 60: CM1CON0 = 0;
   424  00FE  0199               	clrf	25	;volatile
   425                           
   426                           ;main.c: 61: CM2CON0 = 0;
   427  00FF  019A               	clrf	26	;volatile
   428                           
   429                           ;main.c: 64: TRISA |= ((1<<2) | (1<<3));
   430  0100  300C               	movlw	12
   431  0101  1283               	bcf	3,5	;RP0=0, select bank0
   432  0102  1303               	bcf	3,6	;RP1=0, select bank0
   433  0103  00BC               	movwf	??_main
   434  0104  083C               	movf	??_main,w
   435  0105  1683               	bsf	3,5	;RP0=1, select bank1
   436  0106  1303               	bcf	3,6	;RP1=0, select bank1
   437  0107  0485               	iorwf	5,f	;volatile
   438                           
   439                           ;main.c: 65: TRISA &=~ ((1<<0) | (1<<1) | (1<<4) | (1<<5));
   440  0108  30CC               	movlw	204
   441  0109  1283               	bcf	3,5	;RP0=0, select bank0
   442  010A  1303               	bcf	3,6	;RP1=0, select bank0
   443  010B  00BC               	movwf	??_main
   444  010C  083C               	movf	??_main,w
   445  010D  1683               	bsf	3,5	;RP0=1, select bank1
   446  010E  1303               	bcf	3,6	;RP1=0, select bank1
   447  010F  0585               	andwf	5,f	;volatile
   448                           
   449                           ;main.c: 66: TRISC = 0x00;
   450  0110  0187               	clrf	7	;volatile
   451                           
   452                           ;main.c: 67: PORTA &= ~((1<<0) | (1<<1) | (1<<4) | (1<<5));
   453  0111  30CC               	movlw	204
   454  0112  1283               	bcf	3,5	;RP0=0, select bank0
   455  0113  1303               	bcf	3,6	;RP1=0, select bank0
   456  0114  00BC               	movwf	??_main
   457  0115  083C               	movf	??_main,w
   458  0116  0585               	andwf	5,f	;volatile
   459                           
   460                           ;main.c: 68: PORTC = 0xFF;
   461  0117  30FF               	movlw	255
   462  0118  0087               	movwf	7	;volatile
   463                           
   464                           ;main.c: 69: TRISB |= (1<<7);
   465  0119  1683               	bsf	3,5	;RP0=1, select bank1
   466  011A  1303               	bcf	3,6	;RP1=0, select bank1
   467  011B  1786               	bsf	6,7	;volatile
   468                           
   469                           ;main.c: 70: WPUB |= (1<<7);
   470  011C  1283               	bcf	3,5	;RP0=0, select bank2
   471  011D  1703               	bsf	3,6	;RP1=1, select bank2
   472  011E  1795               	bsf	21,7	;volatile
   473  011F                     l1179:	
   474                           ;main.c: 73: while(1)
   475                           
   476                           
   477                           ;main.c: 74: {
   478                           ;main.c: 75: if(sysstate == NormalMode)
   479  011F  1303               	bcf	3,6	;RP1=0, select bank0
   480  0120  08B3               	movf	_sysstate,f
   481  0121  1D03               	skipz
   482  0122  2936               	goto	l1193
   483                           
   484                           ;main.c: 76: {
   485                           ;main.c: 77: if(key_value == 1)
   486  0123  087C               	movf	_key_value,w	;volatile
   487  0124  3A01               	xorlw	1
   488  0125  1D03               	skipz
   489  0126  2928               	goto	l1185
   490                           
   491                           ;main.c: 78: {
   492                           ;main.c: 79: key_value = 0;
   493  0127  01FC               	clrf	_key_value	;volatile
   494  0128                     l1185:	
   495                           
   496                           ;main.c: 81: }
   497                           ;main.c: 82: if(key_value == 2)
   498  0128  087C               	movf	_key_value,w	;volatile
   499  0129  3A02               	xorlw	2
   500  012A  1D03               	skipz
   501  012B  295D               	goto	l1213
   502                           
   503                           ;main.c: 83: {
   504                           ;main.c: 84: sysstate = Setting;
   505  012C  01B3               	clrf	_sysstate
   506  012D  0AB3               	incf	_sysstate,f
   507                           
   508                           ;main.c: 85: flash_dots = 1;
   509  012E  3001               	movlw	1
   510  012F  00BC               	movwf	??_main
   511  0130  083C               	movf	??_main,w
   512  0131  00AF               	movwf	_flash_dots	;volatile
   513  0132                     l64:	
   514                           ;main.c: 86: while((PORTA & (1<<2)) == 0);
   515                           
   516  0132  1D05               	btfss	5,2	;volatile
   517  0133  2932               	goto	l64
   518                           
   519                           ;main.c: 87: key_value = 0;
   520  0134  01FC               	clrf	_key_value	;volatile
   521                           
   522                           ;main.c: 88: }
   523                           ;main.c: 89: }
   524  0135  295D               	goto	l1213
   525  0136                     l1193:	
   526                           
   527                           ;main.c: 90: else
   528                           ;main.c: 91: {
   529                           ;main.c: 92: if((key_value == 1) || (key_value == 2))
   530  0136  087C               	movf	_key_value,w	;volatile
   531  0137  3A01               	xorlw	1
   532  0138  1903               	skipnz
   533  0139  293E               	goto	l1197
   534  013A  087C               	movf	_key_value,w	;volatile
   535  013B  3A02               	xorlw	2
   536  013C  1D03               	skipz
   537  013D  2954               	goto	l68
   538  013E                     l1197:	
   539                           
   540                           ;main.c: 93: {
   541                           ;main.c: 94: key_value = 0;
   542  013E  01FC               	clrf	_key_value	;volatile
   543                           
   544                           ;main.c: 97: minutes++;
   545  013F  3001               	movlw	1
   546  0140  00BC               	movwf	??_main
   547  0141  083C               	movf	??_main,w
   548  0142  07B1               	addwf	_minutes,f	;volatile
   549                           
   550                           ;main.c: 98: if(minutes == 60)
   551  0143  0831               	movf	_minutes,w	;volatile
   552  0144  3A3C               	xorlw	60
   553  0145  1D03               	skipz
   554  0146  2954               	goto	l68
   555                           
   556                           ;main.c: 99: {
   557                           ;main.c: 100: minutes = 0;
   558  0147  01B1               	clrf	_minutes	;volatile
   559                           
   560                           ;main.c: 101: hours++;
   561  0148  3001               	movlw	1
   562  0149  00BC               	movwf	??_main
   563  014A  083C               	movf	??_main,w
   564  014B  07FD               	addwf	_hours,f	;volatile
   565                           
   566                           ;main.c: 102: if(hours == 13)
   567  014C  087D               	movf	_hours,w	;volatile
   568  014D  3A0D               	xorlw	13
   569  014E  1D03               	skipz
   570  014F  2954               	goto	l68
   571                           
   572                           ;main.c: 103: {
   573                           ;main.c: 104: hours = 1;
   574  0150  3001               	movlw	1
   575  0151  00BC               	movwf	??_main
   576  0152  083C               	movf	??_main,w
   577  0153  00FD               	movwf	_hours	;volatile
   578  0154                     l68:	
   579                           
   580                           ;main.c: 105: }
   581                           ;main.c: 106: }
   582                           ;main.c: 107: }
   583                           ;main.c: 109: if(no_key_time > 500)
   584  0154  3001               	movlw	1
   585  0155  0227               	subwf	_no_key_time+1,w	;volatile
   586  0156  30F5               	movlw	245
   587  0157  1903               	skipnz
   588  0158  0226               	subwf	_no_key_time,w	;volatile
   589  0159  1C03               	skipc
   590  015A  295D               	goto	l1213
   591                           
   592                           ;main.c: 110: {
   593                           ;main.c: 111: sysstate = NormalMode;
   594  015B  01B3               	clrf	_sysstate
   595                           
   596                           ;main.c: 112: flash_dots = 0;
   597  015C  01AF               	clrf	_flash_dots	;volatile
   598  015D                     l1213:	
   599                           
   600                           ;main.c: 113: }
   601                           ;main.c: 114: }
   602                           ;main.c: 116: if((isPowerSaveMode == 1) && ((PORTB & (1<<7)) == 0))
   603  015D  0830               	movf	_isPowerSaveMode,w	;volatile
   604  015E  3A01               	xorlw	1
   605  015F  1903               	btfsc	3,2
   606  0160  1B86               	btfsc	6,7	;volatile
   607  0161  291F               	goto	l1179
   608                           
   609                           ;main.c: 117: {
   610                           ;main.c: 118: isPowerSaveMode = 0;
   611  0162  01B0               	clrf	_isPowerSaveMode	;volatile
   612                           
   613                           ;main.c: 119: power_save_timeout = 0;
   614  0163  01A8               	clrf	_power_save_timeout	;volatile
   615  0164  01A9               	clrf	_power_save_timeout+1	;volatile
   616  0165  291F               	goto	l1179
   617  0166                     __end_of_main:	
   618                           
   619                           	psect	text1
   620  0166                     __ptext1:	
   621 ;; *************** function _ISR *****************
   622 ;; Defined at:
   623 ;;		line 289 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;		None               void
   630 ;; Registers used:
   631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   637 ;;      Params:         0       0       0       0
   638 ;;      Locals:         0       0       0       0
   639 ;;      Temps:          0       5       0       0
   640 ;;      Totals:         0       5       0       0
   641 ;;Total ram usage:        5 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; Hardware stack levels required when called:    2
   644 ;; This function calls:
   645 ;;		_clock_increase
   646 ;;		_detect_key
   647 ;;		_flash_digital
   648 ;; This function is called by:
   649 ;;		Interrupt level 1
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           
   654                           ;psect for function _ISR
   655  0166                     _ISR:	
   656                           
   657                           ;main.c: 291: static char cnt1 = 0, cnt2 = 0;
   658                           ;main.c: 292: static int timming_cnt = 0;
   659                           ;main.c: 293: static char x = 0;
   660                           ;main.c: 295: if (INTCONbits.T0IF)
   661  0166  1D0B               	btfss	11,2	;volatile
   662  0167  29C5               	goto	i1l156
   663                           
   664                           ;main.c: 296: {
   665                           ;main.c: 297: INTCONbits.T0IF = 0;
   666  0168  110B               	bcf	11,2	;volatile
   667                           
   668                           ;main.c: 298: TMR0 = 256 - 125;
   669  0169  3083               	movlw	131
   670  016A  0081               	movwf	1	;volatile
   671                           
   672                           ;main.c: 300: if(x == 0)
   673  016B  08AE               	movf	ISR@x,f
   674  016C  1D03               	skipz
   675  016D  2972               	goto	i1l1229
   676                           
   677                           ;main.c: 301: {
   678                           ;main.c: 302: PORTB |= (1<<7);
   679  016E  1786               	bsf	6,7	;volatile
   680                           
   681                           ;main.c: 303: x = 1;
   682  016F  01AE               	clrf	ISR@x
   683  0170  0AAE               	incf	ISR@x,f
   684                           
   685                           ;main.c: 304: }
   686  0171  2977               	goto	i1l1233
   687  0172                     i1l1229:	
   688                           
   689                           ;main.c: 305: else
   690                           ;main.c: 306: {
   691                           ;main.c: 307: PORTB &= ~(1<<7);
   692  0172  307F               	movlw	127
   693  0173  00B7               	movwf	??_ISR
   694  0174  0837               	movf	??_ISR,w
   695  0175  0586               	andwf	6,f	;volatile
   696                           
   697                           ;main.c: 308: x = 0;
   698  0176  01AE               	clrf	ISR@x
   699  0177                     i1l1233:	
   700                           
   701                           ;main.c: 309: }
   702                           ;main.c: 311: cnt1++;
   703  0177  3001               	movlw	1
   704  0178  00B7               	movwf	??_ISR
   705  0179  0837               	movf	??_ISR,w
   706  017A  07AC               	addwf	ISR@cnt1,f
   707                           
   708                           ;main.c: 312: if (cnt1 >= 5)
   709  017B  3005               	movlw	5
   710  017C  022C               	subwf	ISR@cnt1,w
   711  017D  1C03               	skipc
   712  017E  2983               	goto	i1l1241
   713                           
   714                           ;main.c: 313: {
   715                           ;main.c: 314: cnt1 = 0;
   716  017F  01AC               	clrf	ISR@cnt1
   717                           
   718                           ;main.c: 315: flash_digital();
   719  0180  118A  202D  118A   	fcall	_flash_digital
   720  0183                     i1l1241:	
   721                           
   722                           ;main.c: 316: }
   723                           ;main.c: 318: cnt2++;
   724  0183  3001               	movlw	1
   725  0184  1283               	bcf	3,5	;RP0=0, select bank0
   726  0185  1303               	bcf	3,6	;RP1=0, select bank0
   727  0186  00B7               	movwf	??_ISR
   728  0187  0837               	movf	??_ISR,w
   729  0188  07AD               	addwf	ISR@cnt2,f
   730                           
   731                           ;main.c: 319: if (cnt2 >= 10)
   732  0189  300A               	movlw	10
   733  018A  022D               	subwf	ISR@cnt2,w
   734  018B  1C03               	skipc
   735  018C  2991               	goto	i1l1249
   736                           
   737                           ;main.c: 320: {
   738                           ;main.c: 321: cnt2 = 0;
   739  018D  01AD               	clrf	ISR@cnt2
   740                           
   741                           ;main.c: 322: detect_key();
   742  018E  118A  21D0  118A   	fcall	_detect_key
   743  0191                     i1l1249:	
   744                           
   745                           ;main.c: 323: }
   746                           ;main.c: 326: timming_cnt++;
   747  0191  3001               	movlw	1
   748  0192  1283               	bcf	3,5	;RP0=0, select bank0
   749  0193  1303               	bcf	3,6	;RP1=0, select bank0
   750  0194  07A4               	addwf	ISR@timming_cnt,f
   751  0195  1803               	skipnc
   752  0196  0AA5               	incf	ISR@timming_cnt+1,f
   753  0197  3000               	movlw	0
   754  0198  07A5               	addwf	ISR@timming_cnt+1,f
   755                           
   756                           ;main.c: 327: if(timming_cnt >= 1000)
   757  0199  0825               	movf	ISR@timming_cnt+1,w
   758  019A  3A80               	xorlw	128
   759  019B  00FF               	movwf	127
   760  019C  3083               	movlw	131
   761  019D  027F               	subwf	127,w
   762  019E  1D03               	skipz
   763  019F  29A2               	goto	u109_25
   764  01A0  30E8               	movlw	232
   765  01A1  0224               	subwf	ISR@timming_cnt,w
   766  01A2                     u109_25:	
   767  01A2  1C03               	skipc
   768  01A3  29AB               	goto	i1l1257
   769                           
   770                           ;main.c: 328: {
   771                           ;main.c: 329: timming_cnt = 0;
   772  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   773  01A5  1303               	bcf	3,6	;RP1=0, select bank0
   774  01A6  01A4               	clrf	ISR@timming_cnt
   775  01A7  01A5               	clrf	ISR@timming_cnt+1
   776                           
   777                           ;main.c: 330: clock_increase();
   778  01A8  118A  22E0  118A   	fcall	_clock_increase
   779  01AB                     i1l1257:	
   780                           
   781                           ;main.c: 331: }
   782                           ;main.c: 333: if(power_save_timeout < 3000)
   783  01AB  300B               	movlw	11
   784  01AC  1283               	bcf	3,5	;RP0=0, select bank0
   785  01AD  1303               	bcf	3,6	;RP1=0, select bank0
   786  01AE  0229               	subwf	_power_save_timeout+1,w	;volatile
   787  01AF  30B8               	movlw	184
   788  01B0  1903               	skipnz
   789  01B1  0228               	subwf	_power_save_timeout,w	;volatile
   790  01B2  1803               	skipnc
   791  01B3  29BB               	goto	i1l1261
   792                           
   793                           ;main.c: 334: {
   794                           ;main.c: 335: power_save_timeout++;
   795  01B4  3001               	movlw	1
   796  01B5  07A8               	addwf	_power_save_timeout,f	;volatile
   797  01B6  1803               	skipnc
   798  01B7  0AA9               	incf	_power_save_timeout+1,f	;volatile
   799  01B8  3000               	movlw	0
   800  01B9  07A9               	addwf	_power_save_timeout+1,f	;volatile
   801                           
   802                           ;main.c: 336: }
   803  01BA  29C5               	goto	i1l156
   804  01BB                     i1l1261:	
   805                           
   806                           ;main.c: 337: else if((sysstate == NormalMode) && ((PORTB & (1<<7)) != 0))
   807  01BB  08B3               	movf	_sysstate,f
   808  01BC  1903               	btfsc	3,2
   809  01BD  1F86               	btfss	6,7	;volatile
   810  01BE  29C5               	goto	i1l156
   811                           
   812                           ;main.c: 338: {
   813                           ;main.c: 339: isPowerSaveMode = 1;
   814  01BF  3001               	movlw	1
   815  01C0  00B7               	movwf	??_ISR
   816  01C1  0837               	movf	??_ISR,w
   817  01C2  00B0               	movwf	_isPowerSaveMode	;volatile
   818                           
   819                           ;main.c: 340: power_save_timeout = 0;
   820  01C3  01A8               	clrf	_power_save_timeout	;volatile
   821  01C4  01A9               	clrf	_power_save_timeout+1	;volatile
   822  01C5                     i1l156:	
   823  01C5  083B               	movf	??_ISR+4,w
   824  01C6  00FF               	movwf	127
   825  01C7  083A               	movf	??_ISR+3,w
   826  01C8  008A               	movwf	10
   827  01C9  0839               	movf	??_ISR+2,w
   828  01CA  0084               	movwf	4
   829  01CB  0E38               	swapf	(??_ISR+1)^0,w
   830  01CC  0083               	movwf	3
   831  01CD  0EFE               	swapf	126,f
   832  01CE  0E7E               	swapf	126,w
   833  01CF  0009               	retfie
   834  01D0                     __end_of_ISR:	
   835                           
   836                           	psect	intentry
   837  0004                     __pintentry:	
   838                           ;incstack = 0
   839                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   840                           
   841  0004                     interrupt_function:	
   842  007E                     saved_w	set	btemp
   843  0004  00FE               	movwf	btemp
   844  0005  0E03               	swapf	3,w
   845  0006  1283               	bcf	3,5	;RP0=0, select bank0
   846  0007  1303               	bcf	3,6	;RP1=0, select bank0
   847  0008  00B8               	movwf	??_ISR+1
   848  0009  0804               	movf	4,w
   849  000A  00B9               	movwf	??_ISR+2
   850  000B  080A               	movf	10,w
   851  000C  00BA               	movwf	??_ISR+3
   852  000D  087F               	movf	btemp+1,w
   853  000E  00BB               	movwf	??_ISR+4
   854  000F  118A  2966         	ljmp	_ISR
   855                           
   856                           	psect	text2
   857  002D                     __ptext2:	
   858 ;; *************** function _flash_digital *****************
   859 ;; Defined at:
   860 ;;		line 125 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;		None               void
   867 ;; Registers used:
   868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   874 ;;      Params:         0       0       0       0
   875 ;;      Locals:         0       0       0       0
   876 ;;      Temps:          3       0       0       0
   877 ;;      Totals:         3       0       0       0
   878 ;;Total ram usage:        3 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    1
   881 ;; This function calls:
   882 ;;		___awdiv
   883 ;;		___awmod
   884 ;; This function is called by:
   885 ;;		_ISR
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           
   890                           ;psect for function _flash_digital
   891  002D                     _flash_digital:	
   892                           
   893                           ;main.c: 127: static char curseg = 0;
   894                           ;main.c: 128: static char show_dots = 1;
   895                           ;main.c: 129: static int counter = 0;
   896                           ;main.c: 131: digital[3] = hours / 10;
   897                           
   898                           ;incstack = 0
   899                           ; Regs used in _flash_digital: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   900  002D  300A               	movlw	10
   901  002E  00F0               	movwf	___awdiv@divisor
   902  002F  3000               	movlw	0
   903  0030  00F1               	movwf	___awdiv@divisor+1
   904  0031  087D               	movf	_hours,w	;volatile
   905  0032  00F9               	movwf	??_flash_digital
   906  0033  01FA               	clrf	??_flash_digital+1
   907  0034  0879               	movf	??_flash_digital,w
   908  0035  00F2               	movwf	___awdiv@dividend
   909  0036  087A               	movf	??_flash_digital+1,w
   910  0037  00F3               	movwf	___awdiv@dividend+1
   911  0038  118A  2238  118A   	fcall	___awdiv
   912  003B  0870               	movf	?___awdiv,w
   913  003C  00FB               	movwf	??_flash_digital+2
   914  003D  087B               	movf	??_flash_digital+2,w
   915  003E  1283               	bcf	3,5	;RP0=0, select bank0
   916  003F  1303               	bcf	3,6	;RP1=0, select bank0
   917  0040  00A3               	movwf	_digital+3	;volatile
   918                           
   919                           ;main.c: 132: digital[2] = hours % 10;
   920  0041  300A               	movlw	10
   921  0042  00F0               	movwf	___awmod@divisor
   922  0043  3000               	movlw	0
   923  0044  00F1               	movwf	___awmod@divisor+1
   924  0045  087D               	movf	_hours,w	;volatile
   925  0046  00F9               	movwf	??_flash_digital
   926  0047  01FA               	clrf	??_flash_digital+1
   927  0048  0879               	movf	??_flash_digital,w
   928  0049  00F2               	movwf	___awmod@dividend
   929  004A  087A               	movf	??_flash_digital+1,w
   930  004B  00F3               	movwf	___awmod@dividend+1
   931  004C  118A  2293  118A   	fcall	___awmod
   932  004F  0870               	movf	?___awmod,w
   933  0050  00FB               	movwf	??_flash_digital+2
   934  0051  087B               	movf	??_flash_digital+2,w
   935  0052  1283               	bcf	3,5	;RP0=0, select bank0
   936  0053  1303               	bcf	3,6	;RP1=0, select bank0
   937  0054  00A2               	movwf	_digital+2	;volatile
   938                           
   939                           ;main.c: 133: digital[1] = minutes / 10;
   940  0055  300A               	movlw	10
   941  0056  00F0               	movwf	___awdiv@divisor
   942  0057  3000               	movlw	0
   943  0058  00F1               	movwf	___awdiv@divisor+1
   944  0059  0831               	movf	_minutes,w	;volatile
   945  005A  00F9               	movwf	??_flash_digital
   946  005B  01FA               	clrf	??_flash_digital+1
   947  005C  0879               	movf	??_flash_digital,w
   948  005D  00F2               	movwf	___awdiv@dividend
   949  005E  087A               	movf	??_flash_digital+1,w
   950  005F  00F3               	movwf	___awdiv@dividend+1
   951  0060  118A  2238  118A   	fcall	___awdiv
   952  0063  0870               	movf	?___awdiv,w
   953  0064  00FB               	movwf	??_flash_digital+2
   954  0065  087B               	movf	??_flash_digital+2,w
   955  0066  1283               	bcf	3,5	;RP0=0, select bank0
   956  0067  1303               	bcf	3,6	;RP1=0, select bank0
   957  0068  00A1               	movwf	_digital+1	;volatile
   958                           
   959                           ;main.c: 134: digital[0] = minutes % 10;
   960  0069  300A               	movlw	10
   961  006A  00F0               	movwf	___awmod@divisor
   962  006B  3000               	movlw	0
   963  006C  00F1               	movwf	___awmod@divisor+1
   964  006D  0831               	movf	_minutes,w	;volatile
   965  006E  00F9               	movwf	??_flash_digital
   966  006F  01FA               	clrf	??_flash_digital+1
   967  0070  0879               	movf	??_flash_digital,w
   968  0071  00F2               	movwf	___awmod@dividend
   969  0072  087A               	movf	??_flash_digital+1,w
   970  0073  00F3               	movwf	___awmod@dividend+1
   971  0074  118A  2293  118A   	fcall	___awmod
   972  0077  0870               	movf	?___awmod,w
   973  0078  00FB               	movwf	??_flash_digital+2
   974  0079  087B               	movf	??_flash_digital+2,w
   975  007A  1283               	bcf	3,5	;RP0=0, select bank0
   976  007B  1303               	bcf	3,6	;RP1=0, select bank0
   977  007C  00A0               	movwf	_digital	;volatile
   978                           
   979                           ;main.c: 137: if(flash_dots != 0)
   980  007D  082F               	movf	_flash_dots,w	;volatile
   981  007E  1903               	btfsc	3,2
   982  007F  2890               	goto	i1l1037
   983                           
   984                           ;main.c: 138: {
   985                           ;main.c: 139: counter++;
   986  0080  3001               	movlw	1
   987  0081  07AA               	addwf	flash_digital@counter,f
   988  0082  1803               	skipnc
   989  0083  0AAB               	incf	flash_digital@counter+1,f
   990  0084  3000               	movlw	0
   991  0085  07AB               	addwf	flash_digital@counter+1,f
   992                           
   993                           ;main.c: 140: if(counter == 100)
   994  0086  3064               	movlw	100
   995  0087  062A               	xorwf	flash_digital@counter,w
   996  0088  042B               	iorwf	flash_digital@counter+1,w
   997  0089  1903               	btfsc	3,2
   998                           
   999                           ;main.c: 141: {
  1000                           ;main.c: 142: show_dots = 0;
  1001  008A  01BF               	clrf	flash_digital@show_dots
  1002                           
  1003                           ;main.c: 143: }
  1004                           ;main.c: 144: if(counter == 200)
  1005  008B  30C8               	movlw	200
  1006  008C  062A               	xorwf	flash_digital@counter,w
  1007  008D  042B               	iorwf	flash_digital@counter+1,w
  1008  008E  1D03               	skipz
  1009  008F  2894               	goto	i1l1041
  1010  0090                     i1l1037:	
  1011                           ;main.c: 148: }
  1012                           ;main.c: 149: }
  1013                           
  1014                           ;main.c: 147: show_dots = 1;
  1015                           
  1016                           ;main.c: 145: {
  1017                           ;main.c: 146: counter = 0;
  1018                           
  1019                           
  1020                           ;main.c: 150: else
  1021                           ;main.c: 151: {
  1022                           ;main.c: 152: counter = 0;
  1023  0090  01AA               	clrf	flash_digital@counter
  1024  0091  01AB               	clrf	flash_digital@counter+1
  1025                           
  1026                           ;main.c: 153: show_dots = 1;
  1027  0092  01BF               	clrf	flash_digital@show_dots
  1028  0093  0ABF               	incf	flash_digital@show_dots,f
  1029  0094                     i1l1041:	
  1030                           
  1031                           ;main.c: 154: }
  1032                           ;main.c: 156: PORTA &= ~((1<<0) | (1<<1) | (1<<4) | (1<<5));
  1033  0094  30CC               	movlw	204
  1034  0095  00F9               	movwf	??_flash_digital
  1035  0096  0879               	movf	??_flash_digital,w
  1036  0097  0585               	andwf	5,f	;volatile
  1037                           
  1038                           ;main.c: 158: if(isPowerSaveMode == 0)
  1039  0098  08B0               	movf	_isPowerSaveMode,f	;volatile
  1040  0099  1903               	btfsc	3,2
  1041  009A  28D6               	goto	i1l1073
  1042  009B  28E4               	goto	i1l1075
  1043  009C                     i1l1047:	
  1044                           ;main.c: 161: {
  1045                           ;main.c: 162: case 0:
  1046                           
  1047                           ;main.c: 159: {
  1048                           ;main.c: 160: switch (curseg)
  1049                           
  1050                           
  1051                           ;main.c: 163: if(show_dots != 0) PORTC = seg_tab[digital[0]] & ~(1<<7);
  1052  009C  083F               	movf	flash_digital@show_dots,w
  1053  009D  1903               	btfsc	3,2
  1054  009E  28A7               	goto	i1l1051
  1055  009F  0820               	movf	_digital,w
  1056  00A0  3E01               	addlw	low (_seg_tab-__stringbase)
  1057  00A1  0084               	movwf	4
  1058  00A2  118A  2301  118A   	fcall	stringdir
  1059  00A5  397F               	andlw	127
  1060  00A6  28AD               	goto	L1
  1061  00A7                     i1l1051:	
  1062                           
  1063                           ;main.c: 164: else PORTC = seg_tab[digital[0]];
  1064  00A7  0820               	movf	_digital,w
  1065  00A8  3E01               	addlw	low (_seg_tab-__stringbase)
  1066  00A9  0084               	movwf	4
  1067  00AA  118A  2301  118A   	fcall	stringdir
  1068  00AD                     L1:	
  1069  00AD  0087               	movwf	7	;volatile
  1070                           
  1071                           ;main.c: 165: PORTA |= (1<<0);
  1072  00AE  1405               	bsf	5,0	;volatile
  1073                           
  1074                           ;main.c: 166: break;
  1075  00AF  28E4               	goto	i1l1075
  1076  00B0                     i1l1055:	
  1077                           ;main.c: 167: case 1:
  1078                           
  1079                           
  1080                           ;main.c: 168: if(show_dots != 0) PORTC = seg_tab[digital[1]] & ~(1<<7);
  1081  00B0  083F               	movf	flash_digital@show_dots,w
  1082  00B1  1903               	btfsc	3,2
  1083  00B2  28BB               	goto	i1l1059
  1084  00B3  0821               	movf	_digital+1,w	;volatile
  1085  00B4  3E01               	addlw	low (_seg_tab-__stringbase)
  1086  00B5  0084               	movwf	4
  1087  00B6  118A  2301  118A   	fcall	stringdir
  1088  00B9  397F               	andlw	127
  1089  00BA  28C1               	goto	L2
  1090  00BB                     i1l1059:	
  1091                           
  1092                           ;main.c: 169: else PORTC = seg_tab[digital[1]];
  1093  00BB  0821               	movf	_digital+1,w	;volatile
  1094  00BC  3E01               	addlw	low (_seg_tab-__stringbase)
  1095  00BD  0084               	movwf	4
  1096  00BE  118A  2301  118A   	fcall	stringdir
  1097  00C1                     L2:	
  1098  00C1  0087               	movwf	7	;volatile
  1099                           
  1100                           ;main.c: 170: PORTA |= (1<<1);
  1101  00C2  1485               	bsf	5,1	;volatile
  1102                           
  1103                           ;main.c: 171: break;
  1104  00C3  28E4               	goto	i1l1075
  1105  00C4                     i1l1063:	
  1106                           ;main.c: 172: case 2:
  1107                           
  1108                           
  1109                           ;main.c: 173: PORTC = seg_tab[digital[2]];
  1110  00C4  0822               	movf	_digital+2,w	;volatile
  1111  00C5  3E01               	addlw	low (_seg_tab-__stringbase)
  1112  00C6  0084               	movwf	4
  1113  00C7  118A  2301  118A   	fcall	stringdir
  1114  00CA  0087               	movwf	7	;volatile
  1115                           
  1116                           ;main.c: 174: PORTA |= (1<<4);
  1117  00CB  1605               	bsf	5,4	;volatile
  1118                           
  1119                           ;main.c: 175: break;
  1120  00CC  28E4               	goto	i1l1075
  1121  00CD                     i1l1067:	
  1122                           ;main.c: 176: case 3:
  1123                           
  1124                           
  1125                           ;main.c: 177: PORTC = seg_tab[digital[3]];
  1126  00CD  0823               	movf	_digital+3,w	;volatile
  1127  00CE  3E01               	addlw	low (_seg_tab-__stringbase)
  1128  00CF  0084               	movwf	4
  1129  00D0  118A  2301  118A   	fcall	stringdir
  1130  00D3  0087               	movwf	7	;volatile
  1131                           
  1132                           ;main.c: 178: PORTA |= (1<<5);
  1133  00D4  1685               	bsf	5,5	;volatile
  1134                           
  1135                           ;main.c: 182: }
  1136                           
  1137                           ;main.c: 181: break;
  1138                           
  1139                           ;main.c: 180: default:
  1140                           
  1141                           ;main.c: 179: break;
  1142  00D5  28E4               	goto	i1l1075
  1143  00D6                     i1l1073:	
  1144  00D6  0836               	movf	flash_digital@curseg,w
  1145                           
  1146                           ; Switch size 1, requested type "space"
  1147                           ; Number of cases is 4, Range of values is 0 to 3
  1148                           ; switch strategies available:
  1149                           ; Name         Instructions Cycles
  1150                           ; simple_byte           13     7 (average)
  1151                           ; direct_byte           15     7 (fixed)
  1152                           ; jumptable            260     6 (fixed)
  1153                           ;	Chosen strategy is simple_byte
  1154  00D7  3A00               	xorlw	0	; case 0
  1155  00D8  1903               	skipnz
  1156  00D9  289C               	goto	i1l1047
  1157  00DA  3A01               	xorlw	1	; case 1
  1158  00DB  1903               	skipnz
  1159  00DC  28B0               	goto	i1l1055
  1160  00DD  3A03               	xorlw	3	; case 2
  1161  00DE  1903               	skipnz
  1162  00DF  28C4               	goto	i1l1063
  1163  00E0  3A01               	xorlw	1	; case 3
  1164  00E1  1903               	skipnz
  1165  00E2  28CD               	goto	i1l1067
  1166  00E3  28E4               	goto	i1l1075
  1167  00E4                     i1l1075:	
  1168                           
  1169                           ;main.c: 183: }
  1170                           ;main.c: 185: if(++curseg == 4)
  1171  00E4  3001               	movlw	1
  1172  00E5  00F9               	movwf	??_flash_digital
  1173  00E6  0879               	movf	??_flash_digital,w
  1174  00E7  07B6               	addwf	flash_digital@curseg,f
  1175  00E8  0836               	movf	flash_digital@curseg,w
  1176  00E9  3A04               	xorlw	4
  1177  00EA  1D03               	skipz
  1178  00EB  0008               	return
  1179                           
  1180                           ;main.c: 186: curseg = 0;
  1181  00EC  01B6               	clrf	flash_digital@curseg
  1182  00ED  0008               	return
  1183  00EE                     __end_of_flash_digital:	
  1184                           
  1185                           	psect	text3
  1186  0293                     __ptext3:	
  1187 ;; *************** function ___awmod *****************
  1188 ;; Defined at:
  1189 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  divisor         2    0[COMMON] int 
  1192 ;;  dividend        2    2[COMMON] int 
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;  sign            1    6[COMMON] unsigned char 
  1195 ;;  counter         1    5[COMMON] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  2    0[COMMON] int 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1205 ;;      Params:         4       0       0       0
  1206 ;;      Locals:         2       0       0       0
  1207 ;;      Temps:          1       0       0       0
  1208 ;;      Totals:         7       0       0       0
  1209 ;;Total ram usage:        7 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; This function calls:
  1212 ;;		Nothing
  1213 ;; This function is called by:
  1214 ;;		_flash_digital
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           
  1219                           ;psect for function ___awmod
  1220  0293                     ___awmod:	
  1221                           
  1222                           ;incstack = 0
  1223                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1224  0293  01F6               	clrf	___awmod@sign
  1225  0294  1FF3               	btfss	___awmod@dividend+1,7
  1226  0295  2A9D               	goto	i1l993
  1227  0296  09F2               	comf	___awmod@dividend,f
  1228  0297  09F3               	comf	___awmod@dividend+1,f
  1229  0298  0AF2               	incf	___awmod@dividend,f
  1230  0299  1903               	skipnz
  1231  029A  0AF3               	incf	___awmod@dividend+1,f
  1232  029B  01F6               	clrf	___awmod@sign
  1233  029C  0AF6               	incf	___awmod@sign,f
  1234  029D                     i1l993:	
  1235  029D  1FF1               	btfss	___awmod@divisor+1,7
  1236  029E  2AA4               	goto	i1l997
  1237  029F  09F0               	comf	___awmod@divisor,f
  1238  02A0  09F1               	comf	___awmod@divisor+1,f
  1239  02A1  0AF0               	incf	___awmod@divisor,f
  1240  02A2  1903               	skipnz
  1241  02A3  0AF1               	incf	___awmod@divisor+1,f
  1242  02A4                     i1l997:	
  1243  02A4  0871               	movf	___awmod@divisor+1,w
  1244  02A5  0470               	iorwf	___awmod@divisor,w
  1245  02A6  1903               	skipnz
  1246  02A7  2AD1               	goto	i1l1015
  1247  02A8  01F5               	clrf	___awmod@counter
  1248  02A9  0AF5               	incf	___awmod@counter,f
  1249  02AA                     i1l1005:	
  1250  02AA  1BF1               	btfsc	___awmod@divisor+1,7
  1251  02AB  2AB8               	goto	i1l1007
  1252  02AC  3001               	movlw	1
  1253  02AD                     u70_25:	
  1254  02AD  1003               	clrc
  1255  02AE  0DF0               	rlf	___awmod@divisor,f
  1256  02AF  0DF1               	rlf	___awmod@divisor+1,f
  1257  02B0  3EFF               	addlw	-1
  1258  02B1  1D03               	skipz
  1259  02B2  2AAD               	goto	u70_25
  1260  02B3  3001               	movlw	1
  1261  02B4  00F4               	movwf	??___awmod
  1262  02B5  0874               	movf	??___awmod,w
  1263  02B6  07F5               	addwf	___awmod@counter,f
  1264  02B7  2AAA               	goto	i1l1005
  1265  02B8                     i1l1007:	
  1266  02B8  0871               	movf	___awmod@divisor+1,w
  1267  02B9  0273               	subwf	___awmod@dividend+1,w
  1268  02BA  1D03               	skipz
  1269  02BB  2ABE               	goto	u72_25
  1270  02BC  0870               	movf	___awmod@divisor,w
  1271  02BD  0272               	subwf	___awmod@dividend,w
  1272  02BE                     u72_25:	
  1273  02BE  1C03               	skipc
  1274  02BF  2AC6               	goto	i1l1011
  1275  02C0  0870               	movf	___awmod@divisor,w
  1276  02C1  02F2               	subwf	___awmod@dividend,f
  1277  02C2  0871               	movf	___awmod@divisor+1,w
  1278  02C3  1C03               	skipc
  1279  02C4  03F3               	decf	___awmod@dividend+1,f
  1280  02C5  02F3               	subwf	___awmod@dividend+1,f
  1281  02C6                     i1l1011:	
  1282  02C6  3001               	movlw	1
  1283  02C7                     u73_25:	
  1284  02C7  1003               	clrc
  1285  02C8  0CF1               	rrf	___awmod@divisor+1,f
  1286  02C9  0CF0               	rrf	___awmod@divisor,f
  1287  02CA  3EFF               	addlw	-1
  1288  02CB  1D03               	skipz
  1289  02CC  2AC7               	goto	u73_25
  1290  02CD  3001               	movlw	1
  1291  02CE  02F5               	subwf	___awmod@counter,f
  1292  02CF  1D03               	btfss	3,2
  1293  02D0  2AB8               	goto	i1l1007
  1294  02D1                     i1l1015:	
  1295  02D1  0876               	movf	___awmod@sign,w
  1296  02D2  1903               	btfsc	3,2
  1297  02D3  2AD9               	goto	i1l1019
  1298  02D4  09F2               	comf	___awmod@dividend,f
  1299  02D5  09F3               	comf	___awmod@dividend+1,f
  1300  02D6  0AF2               	incf	___awmod@dividend,f
  1301  02D7  1903               	skipnz
  1302  02D8  0AF3               	incf	___awmod@dividend+1,f
  1303  02D9                     i1l1019:	
  1304  02D9  0873               	movf	___awmod@dividend+1,w
  1305  02DA  01F1               	clrf	?___awmod+1
  1306  02DB  07F1               	addwf	?___awmod+1,f
  1307  02DC  0872               	movf	___awmod@dividend,w
  1308  02DD  01F0               	clrf	?___awmod
  1309  02DE  07F0               	addwf	?___awmod,f
  1310  02DF  0008               	return
  1311  02E0                     __end_of___awmod:	
  1312                           
  1313                           	psect	text4
  1314  0238                     __ptext4:	
  1315 ;; *************** function ___awdiv *****************
  1316 ;; Defined at:
  1317 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  divisor         2    0[COMMON] int 
  1320 ;;  dividend        2    2[COMMON] int 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  quotient        2    7[COMMON] int 
  1323 ;;  sign            1    6[COMMON] unsigned char 
  1324 ;;  counter         1    5[COMMON] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  2    0[COMMON] int 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1334 ;;      Params:         4       0       0       0
  1335 ;;      Locals:         4       0       0       0
  1336 ;;      Temps:          1       0       0       0
  1337 ;;      Totals:         9       0       0       0
  1338 ;;Total ram usage:        9 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; This function calls:
  1341 ;;		Nothing
  1342 ;; This function is called by:
  1343 ;;		_flash_digital
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           
  1348                           ;psect for function ___awdiv
  1349  0238                     ___awdiv:	
  1350                           
  1351                           ;incstack = 0
  1352                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1353  0238  01F6               	clrf	___awdiv@sign
  1354  0239  1FF1               	btfss	___awdiv@divisor+1,7
  1355  023A  2A42               	goto	i1l949
  1356  023B  09F0               	comf	___awdiv@divisor,f
  1357  023C  09F1               	comf	___awdiv@divisor+1,f
  1358  023D  0AF0               	incf	___awdiv@divisor,f
  1359  023E  1903               	skipnz
  1360  023F  0AF1               	incf	___awdiv@divisor+1,f
  1361  0240  01F6               	clrf	___awdiv@sign
  1362  0241  0AF6               	incf	___awdiv@sign,f
  1363  0242                     i1l949:	
  1364  0242  1FF3               	btfss	___awdiv@dividend+1,7
  1365  0243  2A4D               	goto	i1l955
  1366  0244  09F2               	comf	___awdiv@dividend,f
  1367  0245  09F3               	comf	___awdiv@dividend+1,f
  1368  0246  0AF2               	incf	___awdiv@dividend,f
  1369  0247  1903               	skipnz
  1370  0248  0AF3               	incf	___awdiv@dividend+1,f
  1371  0249  3001               	movlw	1
  1372  024A  00F4               	movwf	??___awdiv
  1373  024B  0874               	movf	??___awdiv,w
  1374  024C  06F6               	xorwf	___awdiv@sign,f
  1375  024D                     i1l955:	
  1376  024D  01F7               	clrf	___awdiv@quotient
  1377  024E  01F8               	clrf	___awdiv@quotient+1
  1378  024F  0871               	movf	___awdiv@divisor+1,w
  1379  0250  0470               	iorwf	___awdiv@divisor,w
  1380  0251  1903               	skipnz
  1381  0252  2A84               	goto	i1l977
  1382  0253  01F5               	clrf	___awdiv@counter
  1383  0254  0AF5               	incf	___awdiv@counter,f
  1384  0255                     i1l965:	
  1385  0255  1BF1               	btfsc	___awdiv@divisor+1,7
  1386  0256  2A63               	goto	i1l967
  1387  0257  3001               	movlw	1
  1388  0258                     u60_25:	
  1389  0258  1003               	clrc
  1390  0259  0DF0               	rlf	___awdiv@divisor,f
  1391  025A  0DF1               	rlf	___awdiv@divisor+1,f
  1392  025B  3EFF               	addlw	-1
  1393  025C  1D03               	skipz
  1394  025D  2A58               	goto	u60_25
  1395  025E  3001               	movlw	1
  1396  025F  00F4               	movwf	??___awdiv
  1397  0260  0874               	movf	??___awdiv,w
  1398  0261  07F5               	addwf	___awdiv@counter,f
  1399  0262  2A55               	goto	i1l965
  1400  0263                     i1l967:	
  1401  0263  3001               	movlw	1
  1402  0264                     u62_25:	
  1403  0264  1003               	clrc
  1404  0265  0DF7               	rlf	___awdiv@quotient,f
  1405  0266  0DF8               	rlf	___awdiv@quotient+1,f
  1406  0267  3EFF               	addlw	-1
  1407  0268  1D03               	skipz
  1408  0269  2A64               	goto	u62_25
  1409  026A  0871               	movf	___awdiv@divisor+1,w
  1410  026B  0273               	subwf	___awdiv@dividend+1,w
  1411  026C  1D03               	skipz
  1412  026D  2A70               	goto	u63_25
  1413  026E  0870               	movf	___awdiv@divisor,w
  1414  026F  0272               	subwf	___awdiv@dividend,w
  1415  0270                     u63_25:	
  1416  0270  1C03               	skipc
  1417  0271  2A79               	goto	i1l973
  1418  0272  0870               	movf	___awdiv@divisor,w
  1419  0273  02F2               	subwf	___awdiv@dividend,f
  1420  0274  0871               	movf	___awdiv@divisor+1,w
  1421  0275  1C03               	skipc
  1422  0276  03F3               	decf	___awdiv@dividend+1,f
  1423  0277  02F3               	subwf	___awdiv@dividend+1,f
  1424  0278  1477               	bsf	___awdiv@quotient,0
  1425  0279                     i1l973:	
  1426  0279  3001               	movlw	1
  1427  027A                     u64_25:	
  1428  027A  1003               	clrc
  1429  027B  0CF1               	rrf	___awdiv@divisor+1,f
  1430  027C  0CF0               	rrf	___awdiv@divisor,f
  1431  027D  3EFF               	addlw	-1
  1432  027E  1D03               	skipz
  1433  027F  2A7A               	goto	u64_25
  1434  0280  3001               	movlw	1
  1435  0281  02F5               	subwf	___awdiv@counter,f
  1436  0282  1D03               	btfss	3,2
  1437  0283  2A63               	goto	i1l967
  1438  0284                     i1l977:	
  1439  0284  0876               	movf	___awdiv@sign,w
  1440  0285  1903               	btfsc	3,2
  1441  0286  2A8C               	goto	i1l981
  1442  0287  09F7               	comf	___awdiv@quotient,f
  1443  0288  09F8               	comf	___awdiv@quotient+1,f
  1444  0289  0AF7               	incf	___awdiv@quotient,f
  1445  028A  1903               	skipnz
  1446  028B  0AF8               	incf	___awdiv@quotient+1,f
  1447  028C                     i1l981:	
  1448  028C  0878               	movf	___awdiv@quotient+1,w
  1449  028D  01F1               	clrf	?___awdiv+1
  1450  028E  07F1               	addwf	?___awdiv+1,f
  1451  028F  0877               	movf	___awdiv@quotient,w
  1452  0290  01F0               	clrf	?___awdiv
  1453  0291  07F0               	addwf	?___awdiv,f
  1454  0292  0008               	return
  1455  0293                     __end_of___awdiv:	
  1456                           
  1457                           	psect	text5
  1458  01D0                     __ptext5:	
  1459 ;; *************** function _detect_key *****************
  1460 ;; Defined at:
  1461 ;;		line 210 in file "main.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  key             1    1[COMMON] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;		None               void
  1468 ;; Registers used:
  1469 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1475 ;;      Params:         0       0       0       0
  1476 ;;      Locals:         1       0       0       0
  1477 ;;      Temps:          1       0       0       0
  1478 ;;      Totals:         2       0       0       0
  1479 ;;Total ram usage:        2 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_ISR
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           
  1489                           ;psect for function _detect_key
  1490  01D0                     _detect_key:	
  1491                           
  1492                           ;main.c: 212: static char keystate = 0;
  1493                           ;main.c: 213: static char counter = 0;
  1494                           ;main.c: 214: char key;
  1495                           ;main.c: 216: if (key_value != 0)
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in _detect_key: [wreg-fsr0h+status,2+status,0]
  1499  01D0  087C               	movf	_key_value,w	;volatile
  1500  01D1  1D03               	skipz
  1501                           
  1502                           ;main.c: 217: {
  1503                           ;main.c: 218: return;
  1504  01D2  0008               	return
  1505                           
  1506                           ;main.c: 219: }
  1507                           ;main.c: 221: key = PORTA & (1<<2);
  1508  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  1509  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  1510  01D5  0805               	movf	5,w	;volatile
  1511  01D6  3904               	andlw	4
  1512  01D7  00F0               	movwf	??_detect_key
  1513  01D8  0870               	movf	??_detect_key,w
  1514  01D9  00F1               	movwf	detect_key@key
  1515                           
  1516                           ;main.c: 223: if(key != 0)
  1517  01DA  0871               	movf	detect_key@key,w
  1518  01DB  1903               	btfsc	3,2
  1519  01DC  29EB               	goto	i1l1109
  1520                           
  1521                           ;main.c: 224: {
  1522                           ;main.c: 225: if(no_key_time < 520) no_key_time++;
  1523  01DD  3002               	movlw	2
  1524  01DE  0227               	subwf	_no_key_time+1,w	;volatile
  1525  01DF  3008               	movlw	8
  1526  01E0  1903               	skipnz
  1527  01E1  0226               	subwf	_no_key_time,w	;volatile
  1528  01E2  1803               	skipnc
  1529  01E3  2A29               	goto	i1l1147
  1530  01E4  3001               	movlw	1
  1531  01E5  07A6               	addwf	_no_key_time,f	;volatile
  1532  01E6  1803               	skipnc
  1533  01E7  0AA7               	incf	_no_key_time+1,f	;volatile
  1534  01E8  3000               	movlw	0
  1535  01E9  07A7               	addwf	_no_key_time+1,f	;volatile
  1536                           
  1537                           ;main.c: 226: }
  1538  01EA  2A29               	goto	i1l1147
  1539  01EB                     i1l1109:	
  1540                           
  1541                           ;main.c: 227: else
  1542                           ;main.c: 228: {
  1543                           ;main.c: 229: no_key_time = 0;
  1544  01EB  01A6               	clrf	_no_key_time	;volatile
  1545  01EC  01A7               	clrf	_no_key_time+1	;volatile
  1546                           
  1547                           ;main.c: 230: }
  1548                           ;main.c: 232: switch (keystate)
  1549  01ED  2A29               	goto	i1l1147
  1550  01EE                     i1l1111:	
  1551                           ;main.c: 233: {
  1552                           ;main.c: 234: case 0:
  1553                           
  1554                           
  1555                           ;main.c: 235: if (key == 0)
  1556  01EE  08F1               	movf	detect_key@key,f
  1557  01EF  1D03               	skipz
  1558  01F0  0008               	return
  1559                           
  1560                           ;main.c: 236: {
  1561                           ;main.c: 237: keystate = 1;
  1562  01F1  01B5               	clrf	detect_key@keystate
  1563  01F2  0AB5               	incf	detect_key@keystate,f
  1564                           
  1565                           ;main.c: 238: }
  1566                           ;main.c: 239: break;
  1567  01F3  0008               	return
  1568  01F4                     i1l1115:	
  1569                           ;main.c: 240: case 1:
  1570                           
  1571                           
  1572                           ;main.c: 241: if (key == 0)
  1573  01F4  08F1               	movf	detect_key@key,f
  1574  01F5  1D03               	skipz
  1575  01F6  2A03               	goto	i1l1123
  1576                           
  1577                           ;main.c: 242: {
  1578                           ;main.c: 243: keystate = 2;
  1579  01F7  3002               	movlw	2
  1580  01F8  00F0               	movwf	??_detect_key
  1581  01F9  0870               	movf	??_detect_key,w
  1582  01FA  00B5               	movwf	detect_key@keystate
  1583                           
  1584                           ;main.c: 244: key_value = 1;
  1585  01FB  3001               	movlw	1
  1586  01FC  00F0               	movwf	??_detect_key
  1587  01FD  0870               	movf	??_detect_key,w
  1588  01FE  00FC               	movwf	_key_value	;volatile
  1589                           
  1590                           ;main.c: 245: isPowerSaveMode = 0;
  1591  01FF  01B0               	clrf	_isPowerSaveMode	;volatile
  1592                           
  1593                           ;main.c: 246: power_save_timeout = 0;
  1594  0200  01A8               	clrf	_power_save_timeout	;volatile
  1595  0201  01A9               	clrf	_power_save_timeout+1	;volatile
  1596                           
  1597                           ;main.c: 247: }
  1598  0202  0008               	return
  1599  0203                     i1l1123:	
  1600                           
  1601                           ;main.c: 248: else
  1602                           ;main.c: 249: {
  1603                           ;main.c: 250: keystate = 0;
  1604  0203  01B5               	clrf	detect_key@keystate
  1605                           
  1606                           ;main.c: 251: }
  1607                           ;main.c: 252: break;
  1608  0204  0008               	return
  1609  0205                     i1l1125:	
  1610                           ;main.c: 253: case 2:
  1611                           
  1612                           
  1613                           ;main.c: 254: if (key == 0)
  1614  0205  08F1               	movf	detect_key@key,f
  1615  0206  1D03               	skipz
  1616  0207  2A19               	goto	i1l1137
  1617                           
  1618                           ;main.c: 255: {
  1619                           ;main.c: 256: if(counter < key_delay_time)
  1620  0208  083D               	movf	_key_delay_time,w	;volatile
  1621  0209  0234               	subwf	detect_key@counter,w
  1622  020A  1803               	skipnc
  1623  020B  2A11               	goto	i1l1131
  1624                           
  1625                           ;main.c: 257: {
  1626                           ;main.c: 258: counter++;
  1627  020C  3001               	movlw	1
  1628  020D  00F0               	movwf	??_detect_key
  1629  020E  0870               	movf	??_detect_key,w
  1630  020F  07B4               	addwf	detect_key@counter,f
  1631                           
  1632                           ;main.c: 259: }
  1633  0210  0008               	return
  1634  0211                     i1l1131:	
  1635                           
  1636                           ;main.c: 260: else
  1637                           ;main.c: 261: {
  1638                           ;main.c: 262: key_value = 2;
  1639  0211  3002               	movlw	2
  1640  0212  00F0               	movwf	??_detect_key
  1641  0213  0870               	movf	??_detect_key,w
  1642  0214  00FC               	movwf	_key_value	;volatile
  1643                           
  1644                           ;main.c: 263: isPowerSaveMode = 0;
  1645  0215  01B0               	clrf	_isPowerSaveMode	;volatile
  1646                           
  1647                           ;main.c: 264: power_save_timeout = 0;
  1648  0216  01A8               	clrf	_power_save_timeout	;volatile
  1649  0217  01A9               	clrf	_power_save_timeout+1	;volatile
  1650                           
  1651                           ;main.c: 265: }
  1652                           ;main.c: 266: }
  1653  0218  0008               	return
  1654  0219                     i1l1137:	
  1655                           
  1656                           ;main.c: 267: else
  1657                           ;main.c: 268: {
  1658                           ;main.c: 269: keystate = 3;
  1659  0219  3003               	movlw	3
  1660  021A  00F0               	movwf	??_detect_key
  1661  021B  0870               	movf	??_detect_key,w
  1662  021C  00B5               	movwf	detect_key@keystate
  1663                           
  1664                           ;main.c: 270: }
  1665                           ;main.c: 271: break;
  1666  021D  0008               	return
  1667  021E                     i1l1139:	
  1668                           ;main.c: 272: case 3:
  1669                           
  1670                           
  1671                           ;main.c: 273: if (key != 0)
  1672  021E  0871               	movf	detect_key@key,w
  1673  021F  1903               	btfsc	3,2
  1674  0220  2A24               	goto	i1l1143
  1675                           
  1676                           ;main.c: 274: {
  1677                           ;main.c: 275: keystate = 0;
  1678  0221  01B5               	clrf	detect_key@keystate
  1679                           
  1680                           ;main.c: 276: counter = 0;
  1681  0222  01B4               	clrf	detect_key@counter
  1682                           
  1683                           ;main.c: 277: }
  1684  0223  0008               	return
  1685  0224                     i1l1143:	
  1686                           
  1687                           ;main.c: 278: else
  1688                           ;main.c: 279: {
  1689                           ;main.c: 280: keystate = 2;
  1690  0224  3002               	movlw	2
  1691  0225  00F0               	movwf	??_detect_key
  1692  0226  0870               	movf	??_detect_key,w
  1693  0227  00B5               	movwf	detect_key@keystate
  1694                           
  1695                           ;main.c: 285: }
  1696                           
  1697                           ;main.c: 284: break;
  1698                           
  1699                           ;main.c: 283: default:
  1700                           
  1701                           ;main.c: 281: }
  1702                           ;main.c: 282: break;
  1703  0228  0008               	return
  1704  0229                     i1l1147:	
  1705  0229  0835               	movf	detect_key@keystate,w
  1706                           
  1707                           ; Switch size 1, requested type "space"
  1708                           ; Number of cases is 4, Range of values is 0 to 3
  1709                           ; switch strategies available:
  1710                           ; Name         Instructions Cycles
  1711                           ; simple_byte           13     7 (average)
  1712                           ; direct_byte           15     7 (fixed)
  1713                           ; jumptable            260     6 (fixed)
  1714                           ;	Chosen strategy is simple_byte
  1715  022A  3A00               	xorlw	0	; case 0
  1716  022B  1903               	skipnz
  1717  022C  29EE               	goto	i1l1111
  1718  022D  3A01               	xorlw	1	; case 1
  1719  022E  1903               	skipnz
  1720  022F  29F4               	goto	i1l1115
  1721  0230  3A03               	xorlw	3	; case 2
  1722  0231  1903               	skipnz
  1723  0232  2A05               	goto	i1l1125
  1724  0233  3A01               	xorlw	1	; case 3
  1725  0234  1903               	skipnz
  1726  0235  2A1E               	goto	i1l1139
  1727  0236  2A37               	goto	i1l117
  1728  0237                     i1l117:	
  1729  0237  0008               	return
  1730  0238                     __end_of_detect_key:	
  1731                           
  1732                           	psect	text6
  1733  02E0                     __ptext6:	
  1734 ;; *************** function _clock_increase *****************
  1735 ;; Defined at:
  1736 ;;		line 190 in file "main.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;		None               void
  1743 ;; Registers used:
  1744 ;;		wreg, status,2, status,0
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1750 ;;      Params:         0       0       0       0
  1751 ;;      Locals:         0       0       0       0
  1752 ;;      Temps:          1       0       0       0
  1753 ;;      Totals:         1       0       0       0
  1754 ;;Total ram usage:        1 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_ISR
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function _clock_increase
  1765  02E0                     _clock_increase:	
  1766                           
  1767                           ;main.c: 192: seconds++;
  1768                           
  1769                           ;incstack = 0
  1770                           ; Regs used in _clock_increase: [wreg+status,2+status,0]
  1771  02E0  3001               	movlw	1
  1772  02E1  00F0               	movwf	??_clock_increase
  1773  02E2  0870               	movf	??_clock_increase,w
  1774  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1775  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1776  02E5  07B2               	addwf	_seconds,f	;volatile
  1777                           
  1778                           ;main.c: 193: if(seconds == 60)
  1779  02E6  0832               	movf	_seconds,w	;volatile
  1780  02E7  3A3C               	xorlw	60
  1781  02E8  1D03               	skipz
  1782  02E9  0008               	return
  1783                           
  1784                           ;main.c: 194: {
  1785                           ;main.c: 195: seconds = 0;
  1786  02EA  01B2               	clrf	_seconds	;volatile
  1787                           
  1788                           ;main.c: 196: minutes++;
  1789  02EB  3001               	movlw	1
  1790  02EC  00F0               	movwf	??_clock_increase
  1791  02ED  0870               	movf	??_clock_increase,w
  1792  02EE  07B1               	addwf	_minutes,f	;volatile
  1793                           
  1794                           ;main.c: 197: if(minutes == 60)
  1795  02EF  0831               	movf	_minutes,w	;volatile
  1796  02F0  3A3C               	xorlw	60
  1797  02F1  1D03               	skipz
  1798  02F2  0008               	return
  1799                           
  1800                           ;main.c: 198: {
  1801                           ;main.c: 199: minutes = 0;
  1802  02F3  01B1               	clrf	_minutes	;volatile
  1803                           
  1804                           ;main.c: 200: hours++;
  1805  02F4  3001               	movlw	1
  1806  02F5  00F0               	movwf	??_clock_increase
  1807  02F6  0870               	movf	??_clock_increase,w
  1808  02F7  07FD               	addwf	_hours,f	;volatile
  1809                           
  1810                           ;main.c: 201: if(hours == 13)
  1811  02F8  087D               	movf	_hours,w	;volatile
  1812  02F9  3A0D               	xorlw	13
  1813  02FA  1D03               	skipz
  1814  02FB  0008               	return
  1815                           
  1816                           ;main.c: 202: {
  1817                           ;main.c: 203: hours = 1;
  1818  02FC  3001               	movlw	1
  1819  02FD  00F0               	movwf	??_clock_increase
  1820  02FE  0870               	movf	??_clock_increase,w
  1821  02FF  00FD               	movwf	_hours	;volatile
  1822  0300  0008               	return
  1823  0301                     __end_of_clock_increase:	
  1824  007E                     btemp	set	126	;btemp
  1825  007E                     wtemp	set	126
  1826  007E                     wtemp0	set	126
  1827  0080                     wtemp1	set	128
  1828  0082                     wtemp2	set	130
  1829  0084                     wtemp3	set	132
  1830  0086                     wtemp4	set	134
  1831  0088                     wtemp5	set	136
  1832  007F                     wtemp6	set	127
  1833  007E                     ttemp	set	126
  1834  007E                     ttemp0	set	126
  1835  0081                     ttemp1	set	129
  1836  0084                     ttemp2	set	132
  1837  0087                     ttemp3	set	135
  1838  007F                     ttemp4	set	127
  1839  007E                     ltemp	set	126
  1840  007E                     ltemp0	set	126
  1841  0082                     ltemp1	set	130
  1842  0086                     ltemp2	set	134
  1843  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    10
    Data        4
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      6      32
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_flash_digital
    _flash_digital->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  5     5      0    1131
                                              0 BANK0      5     5      0
                     _clock_increase
                         _detect_key
                      _flash_digital
 ---------------------------------------------------------------------------------
 (2) _flash_digital                                        3     3      0    1020
                                              9 COMMON     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     508
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _detect_key                                           2     2      0     111
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _clock_increase                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)
   _clock_increase
   _detect_key
   _flash_digital
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       5        0.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      6      20       3       40.0%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2E      10        0.0%
ABS                  0      0      2E       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Feb 04 10:58:09 2015

                      pc 0002              __CFG_CP$OFF 0000                       l64 0132  
                     l68 0154             ___awdiv@sign 0076                       fsr 0004  
       ??_clock_increase 0070             __CFG_CPD$OFF 0000                      _ISR 0166  
                    fsr0 0004                      indf 0000             ___awmod@sign 0076  
                   ?_ISR 0070                     ISR@x 002E                     l1213 015D  
                   l1185 0128                     l1193 0136                     l1179 011F  
                   l1197 013E                     _TMR0 0001                     _WPUB 0115  
                   _main 00EE                     btemp 007E                     ltemp 007E  
                   start 0011                     ttemp 007E                     wtemp 007E  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ??_ISR 0037  
                  ?_main 0070          __end_of___awdiv 0293            __CFG_WDTE$OFF 0000  
        __end_of___awmod 02E0                    _ANSEL 011E          ___awdiv@divisor 0070  
        ??_flash_digital 0079                    i1l117 0237                    i1l156 01C5  
                  i1l955 024D                    i1l981 028C                    i1l973 0279  
                  i1l965 0255                    i1l949 0242                    i1l967 0263  
                  i1l977 0284                    i1l993 029D                    i1l997 02A4  
        ___awdiv@counter 0075                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    u60_25 0258                    u62_25 0264  
                  u70_25 02AD                    u63_25 0270                    u64_25 027A  
                  u72_25 02BE                    _TRISA 0085                    _TRISB 0086  
                  u73_25 02C7                    _TRISC 0087            __CFG_PWRTE$ON 0000  
         __CFG_FCMEN$OFF 0000                    _hours 007D          __end_of_seg_tab 0311  
         __CFG_BOREN$OFF 0000                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __initialization 0013             __end_of_main 0166  
                 ??_main 003C     flash_digital@counter 002A         ___awdiv@dividend 0072  
                 i1l1011 02C6                   i1l1005 02AA                   i1l1111 01EE  
                 i1l1007 02B8                   i1l1015 02D1                   i1l1041 0094  
                 i1l1131 0211                   i1l1123 0203                   i1l1115 01F4  
                 i1l1019 02D9                   i1l1051 00A7                   i1l1125 0205  
                 i1l1109 01EB                   i1l1037 0090                   i1l1143 0224  
                 i1l1063 00C4                   i1l1055 00B0                   i1l1047 009C  
                 i1l1137 0219                   i1l1073 00D6                   i1l1241 0183  
                 i1l1233 0177                   i1l1139 021E                   i1l1147 0229  
                 i1l1067 00CD                   i1l1059 00BB                   i1l1075 00E4  
                 i1l1261 01BB                   i1l1229 0172                   i1l1257 01AB  
                 i1l1249 0191                   u109_25 01A2                   _OSCCON 008F  
              ??___awdiv 0074                ??___awmod 0074         ___awdiv@quotient 0077  
        ___awmod@divisor 0070          ___awmod@counter 0075             __pdataCOMMON 007D  
                 saved_w 007E  __end_of__initialization 002A           __pcstackCOMMON 0070  
           __pidataBANK0 0319        detect_key@counter 0034               __pbssBANK0 0020  
                ISR@cnt1 002C                  ISR@cnt2 002D               __pmaintext 00EE  
             __pintentry 0004               _detect_key 01D0                  _CM1CON0 0119  
                _CM2CON0 011A               _flash_dots 002F               __stringtab 0301  
        _isPowerSaveMode 0030                  ___awdiv 0238                  ___awmod 0293  
                _digital 0020                  __ptext1 0166                  __ptext2 002D  
                __ptext3 0293                  __ptext4 0238                  __ptext5 01D0  
                __ptext6 02E0             __size_of_ISR 006A         ___awmod@dividend 0072  
                _seg_tab 0307    __end_of_flash_digital 00EE                  _minutes 0031  
                _seconds 0032                  clrloop0 0312  __size_of_clock_increase 0021  
   end_of_initialization 002A              ?_detect_key 0070           _key_delay_time 003D  
         ISR@timming_cnt 0024            __pidataCOMMON 031C      start_initialization 0013  
            __end_of_ISR 01D0      __size_of_detect_key 0068      flash_digital@curseg 0036  
     detect_key@keystate 0035              __pdataBANK0 003D              __pbssCOMMON 007C  
              ___latbits 0001            __pcstackBANK0 0037           _clock_increase 02E0  
               ?___awdiv 0070                 ?___awmod 0070                __pstrings 0301  
     _power_save_timeout 0028   flash_digital@show_dots 003F   __end_of_clock_increase 0301  
              _key_value 007C        interrupt_function 0004                clear_ram0 0311  
           ??_detect_key 0070                _show_dots 003E              __stringbase 0306  
        ?_clock_increase 0070            detect_key@key 0071       __end_of_detect_key 0238  
 __size_of_flash_digital 00C1         __size_of___awdiv 005B         __size_of___awmod 004D  
     __end_of__stringtab 0307            __size_of_main 0078              _no_key_time 0026  
               _sysstate 0033               _INTCONbits 000B            _flash_digital 002D  
               intlevel1 0000                stringcode 0301               _OPTION_REG 0081  
         ?_flash_digital 0070                 stringdir 0301                 stringtab 0301  
      __CFG_FOSC$INTRCIO 0000  
